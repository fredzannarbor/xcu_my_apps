"""
Tranche Override Manager for LSI Field Mapping

This module handles the precedence logic for tranche configuration overrides
versus LLM-generated values, with support for both replace and append operations.
"""

from typing import Any, Dict, List, Optional
import logging

logger = logging.getLogger(__name__)


class TrancheOverrideManager:
    """Manages tranche configuration overrides for LSI field mapping."""
    
    def __init__(self, tranche_config: Optional[Dict[str, Any]] = None):
        """
        Initialize the override manager with tranche configuration.
        
        Args:
            tranche_config: Dictionary containing tranche configuration
        """
        self.tranche_config = tranche_config or {}
        self.field_overrides = self.tranche_config.get('field_overrides', {})
        self.append_fields = set(self.tranche_config.get('append_fields', []))
        self.blank_fields = set(self.tranche_config.get('blank_fields', []))
        
    def apply_overrides(self, field_name: str, llm_value: str, 
                       tranche_value: Any = None, field_type: str = "replace") -> str:
        """
        Apply tranche overrides with support for append operations.
        
        Args:
            field_name: Name of the field being processed
            llm_value: Value generated by LLM
            tranche_value: Override value from tranche config (optional)
            field_type: Type of override ("replace" or "append")
            
        Returns:
            Final field value after applying overrides
        """
        # Check if field should be blank (for Ingram pricing fields)
        if field_name in self.blank_fields:
            logger.debug(f"Field '{field_name}' configured to be blank")
            return ""
            
        # Get tranche value if not provided
        if tranche_value is None:
            tranche_value = self.field_overrides.get(field_name)
            
        # If no tranche override exists, return LLM value
        if not self.should_override(tranche_value):
            return llm_value or ""
            
        # Handle append fields
        if self.is_append_field(field_name):
            base_value = llm_value or ""
            append_value = str(tranche_value)
            result = base_value + append_value if base_value else append_value
            logger.debug(f"Appended tranche value to field '{field_name}': '{base_value}' + '{append_value}' = '{result}'")
            return result
            
        # Handle replace fields (default behavior)
        result = str(tranche_value)
        logger.debug(f"Replaced field '{field_name}' with tranche value: '{result}'")
        return result
        
    def is_append_field(self, field_name: str) -> bool:
        """
        Check if field should append rather than replace.
        
        Args:
            field_name: Name of the field to check
            
        Returns:
            True if field should append tranche value to LLM value
        """
        return field_name in self.append_fields
        
    def should_override(self, tranche_value: Any) -> bool:
        """
        Determine if tranche value should override LLM value.
        
        Args:
            tranche_value: Value from tranche configuration
            
        Returns:
            True if tranche value should be used
        """
        # None means no override specified
        if tranche_value is None:
            return False
            
        # Empty string is a valid override (means explicitly set to blank)
        if tranche_value == "":
            return True
            
        # Any other non-empty value should override
        return bool(tranche_value)
        
    def get_field_override(self, field_name: str) -> Any:
        """
        Get the override value for a specific field.
        
        Args:
            field_name: Name of the field
            
        Returns:
            Override value or None if no override exists
        """
        return self.field_overrides.get(field_name)
        
    def has_override(self, field_name: str) -> bool:
        """
        Check if a field has an override configured.
        
        Args:
            field_name: Name of the field
            
        Returns:
            True if field has an override configured
        """
        return field_name in self.field_overrides
        
    def is_blank_field(self, field_name: str) -> bool:
        """
        Check if a field should be forced to blank.
        
        Args:
            field_name: Name of the field
            
        Returns:
            True if field should be blank
        """
        return field_name in self.blank_fields
        
    def get_override_type(self, field_name: str) -> str:
        """
        Get the type of override for a field.
        
        Args:
            field_name: Name of the field
            
        Returns:
            "append", "replace", "blank", or "none"
        """
        if field_name in self.blank_fields:
            return "blank"
        elif field_name in self.append_fields:
            return "append"
        elif field_name in self.field_overrides:
            return "replace"
        else:
            return "none"