#!/usr/bin/env python3
"""
Extract prompts.json file from oneshot imprint configuration.

This script takes a oneshot imprint configuration (generated by generate_oneshot_imprint.py)
and extracts the prompts configuration in the format expected by run_book_pipeline.py.
"""

import argparse
import json
import sys
from pathlib import Path
from typing import Dict, Any, List
from datetime import datetime

# Add project root to path
project_root = Path(__file__).resolve().parent.parent
sys.path.append(str(project_root))

def extract_prompts_config(oneshot_config: Dict[str, Any]) -> Dict[str, Any]:
    """Extract prompts configuration from oneshot imprint config."""

    # Standard prompt keys that the book pipeline expects
    standard_prompt_keys = [
        "gemini_get_basic_info",
        "bibliographic_key_phrases",
        "storefront_get_en_metadata",
        "imprint_quotes_prompt",
        "mnemonics_prompt",
        "bibliography_prompt",
        "back_cover_text"
    ]

    # Keys that should be re-prompted (processed multiple times)
    standard_reprompt_keys = [
        "mnemonics_prompt"
    ]

    # Extract imprint basic info
    imprint_name = oneshot_config.get("imprint", "Unknown Imprint")
    imprint_intro = oneshot_config.get("branding", {}).get("mission_statement",
                                      f"{imprint_name} publishes high-quality books.")

    # Extract specialization from publisher persona and branding
    publisher_persona = oneshot_config.get("publisher_persona", {})
    branding = oneshot_config.get("branding", {})
    publishing_focus = oneshot_config.get("publishing_focus", {})

    specialization = branding.get("unique_selling_proposition",
                     publisher_persona.get("preferred_topics",
                     ", ".join(publishing_focus.get("primary_genres", ["Literature"]))))

    # Create the prompts.json structure expected by book pipeline
    prompts_config = {
        "imprint_name": imprint_name.lower().replace(" ", "_"),
        "imprint_intro": imprint_intro,
        "prompt_keys": standard_prompt_keys.copy(),
        "reprompt_keys": standard_reprompt_keys.copy(),
        "_metadata": {
            "imprint": imprint_name,
            "generated_at": datetime.now().isoformat(),
            "specialization": specialization,
            "extracted_from_oneshot": True
        }
    }

    # Extract content generation configuration if available
    content_generation = oneshot_config.get("content_generation", {})
    if content_generation:
        # Add content generation sections to prompts config
        for section_name, section_config in content_generation.items():
            prompts_config[section_name] = section_config

    # Extract editorial review configuration if available
    editorial_review = oneshot_config.get("editorial_review", {})
    if editorial_review:
        for section_name, section_config in editorial_review.items():
            prompts_config[section_name] = section_config

    # Extract production support configuration if available
    production_support = oneshot_config.get("production_support", {})
    if production_support:
        for section_name, section_config in production_support.items():
            prompts_config[section_name] = section_config

    return prompts_config

def save_prompts_config(prompts_config: Dict[str, Any], output_path: Path):
    """Save the prompts configuration to file."""
    output_path.parent.mkdir(parents=True, exist_ok=True)

    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(prompts_config, f, indent=2, ensure_ascii=False)

    print(f"‚úÖ Prompts configuration saved to: {output_path}")

def main():
    """Main CLI interface."""
    parser = argparse.ArgumentParser(
        description="Extract prompts.json from oneshot imprint configuration",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Extract from oneshot config and save to imprint directory
  python extract_prompts_from_oneshot_config.py configs/imprints/nimble_ultra.json

  # Extract from oneshot config with custom output path
  python extract_prompts_from_oneshot_config.py configs/imprints/nimble_ultra.json --output imprints/nimble_ultra/prompts.json
        """
    )

    parser.add_argument(
        "oneshot_config",
        help="Path to the oneshot imprint configuration file"
    )

    parser.add_argument(
        "--output", "-o",
        help="Output path for prompts.json (defaults to imprints/{imprint_name}/prompts.json)",
        default=None
    )

    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Show what would be generated without saving"
    )

    args = parser.parse_args()

    try:
        # Load oneshot configuration
        config_path = Path(args.oneshot_config)
        if not config_path.exists():
            print(f"‚ùå Configuration file not found: {config_path}")
            sys.exit(1)

        print(f"üìñ Loading oneshot configuration from: {config_path}")
        with open(config_path, 'r', encoding='utf-8') as f:
            oneshot_config = json.load(f)

        # Extract prompts configuration
        print("üîÑ Extracting prompts configuration...")
        prompts_config = extract_prompts_config(oneshot_config)

        if args.dry_run:
            print("üîç DRY RUN - Generated prompts configuration:")
            print("=" * 60)
            print(json.dumps(prompts_config, indent=2, ensure_ascii=False))
            print("=" * 60)
            return

        # Determine output path
        if args.output:
            output_path = Path(args.output)
        else:
            imprint_name = prompts_config["imprint_name"]
            output_path = project_root / "imprints" / imprint_name / "prompts.json"

        # Save prompts configuration
        save_prompts_config(prompts_config, output_path)

        # Show summary
        print(f"\nüìã Summary:")
        print(f"   Imprint: {prompts_config['_metadata']['imprint']}")
        print(f"   Prompt Keys: {len(prompts_config['prompt_keys'])}")
        print(f"   Reprompt Keys: {len(prompts_config['reprompt_keys'])}")
        print(f"   Content Generation Sections: {len([k for k in prompts_config.keys() if k not in ['imprint_name', 'imprint_intro', 'prompt_keys', 'reprompt_keys', '_metadata']])}")
        print(f"   Output: {output_path}")

        print(f"\n‚úÖ Ready for book pipeline! You can now run:")
        print(f"   python run_book_pipeline.py --imprint {prompts_config['imprint_name']} [other options]")

    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()