"""
Tests for the plugin system - simplified version.
"""

import pytest
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.arxiv_writer.plugins.base import (
    BasePlugin, SectionPlugin, FormatterPlugin, ValidatorPlugin,
    ContextProcessorPlugin, PluginType, PluginMetadata
)
from src.arxiv_writer.plugins.registry import PluginRegistry
from src.arxiv_writer.plugins.manager import PluginManager
from src.arxiv_writer.core.models import Section, ValidationResult
from src.arxiv_writer.core.exceptions import PluginError


# Test plugin implementations
class TestSectionPlugin(SectionPlugin):
    """Test section plugin implementation."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="test_section",
            version="1.0.0",
            description="Test section plugin",
            author="Test Author",
            plugin_type=PluginType.SECTION
        )
    
    def generate_section(self, context):
        return Section(
            name="test_section",
            title="Test Section",
            content="This is a test section generated by the plugin.",
            word_count=10
        )


class TestFormatterPlugin(FormatterPlugin):
    """Test formatter plugin implementation."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="test_formatter",
            version="1.0.0",
            description="Test formatter plugin",
            author="Test Author",
            plugin_type=PluginType.FORMATTER
        )
    
    def format_paper(self, sections):
        return "\n\n".join([f"# {section.title}\n{section.content}" for section in sections])
    
    def get_supported_formats(self):
        return ["markdown", "text"]


class TestValidatorPlugin(ValidatorPlugin):
    """Test validator plugin implementation."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="test_validator",
            version="1.0.0",
            description="Test validator plugin",
            author="Test Author",
            plugin_type=PluginType.VALIDATOR
        )
    
    def validate_content(self, content, context=None):
        word_count = len(content.split())
        is_valid = word_count >= 5
        
        errors = [] if is_valid else ["Content too short"]
        return ValidationResult(
            is_valid=is_valid,
            errors=errors,
            warnings=[],
            metrics={"word_count": word_count}
        )


def test_plugin_base_functionality():
    """Test basic plugin functionality."""
    plugin = TestSectionPlugin()
    
    # Test metadata
    metadata = plugin.metadata
    assert metadata.name == "test_section"
    assert metadata.version == "1.0.0"
    assert metadata.plugin_type == PluginType.SECTION
    
    # Test initialization
    assert not plugin.is_initialized
    plugin.initialize()
    assert plugin.is_initialized
    
    # Test cleanup
    plugin.cleanup()
    assert not plugin.is_initialized


def test_section_plugin():
    """Test section plugin functionality."""
    plugin = TestSectionPlugin()
    context = {"test_data": "value"}
    
    section = plugin.generate_section(context)
    
    assert isinstance(section, Section)
    assert section.name == "test_section"
    assert section.title == "Test Section"
    assert "test section" in section.content.lower()


def test_formatter_plugin():
    """Test formatter plugin functionality."""
    plugin = TestFormatterPlugin()
    sections = [
        Section(name="intro", title="Introduction", content="Intro content", word_count=2),
        Section(name="conclusion", title="Conclusion", content="Conclusion content", word_count=2)
    ]
    
    formatted = plugin.format_paper(sections)
    
    assert "# Introduction" in formatted
    assert "# Conclusion" in formatted
    assert "Intro content" in formatted
    assert "Conclusion content" in formatted
    
    formats = plugin.get_supported_formats()
    assert "markdown" in formats
    assert "text" in formats


def test_validator_plugin():
    """Test validator plugin functionality."""
    plugin = TestValidatorPlugin()
    
    # Test valid content
    content = "This is valid content with enough words."
    result = plugin.validate_content(content)
    
    assert result.is_valid
    assert len(result.errors) == 0
    assert result.metrics["word_count"] == 7
    
    # Test invalid content
    content = "Too short"
    result = plugin.validate_content(content)
    
    assert not result.is_valid
    assert "Content too short" in result.errors
    assert result.metrics["word_count"] == 2


def test_plugin_registry():
    """Test plugin registry functionality."""
    registry = PluginRegistry()
    
    # Register plugin class
    registry.register_plugin_class(TestSectionPlugin)
    
    plugins = registry.list_registered_plugins()
    assert "test_section" in plugins
    assert plugins["test_section"]["type"] == "section"
    
    # Create plugin instance
    instance = registry.create_plugin_instance("test_section")
    assert isinstance(instance, TestSectionPlugin)
    assert not instance.is_initialized
    
    # Register instance
    registry.register_plugin_instance(instance)
    retrieved = registry.get_plugin("test_section")
    assert retrieved is instance
    
    # Initialize plugin
    registry.initialize_plugin("test_section")
    assert instance.is_initialized
    
    # Get plugins by type
    section_plugins = registry.get_plugins_by_type(PluginType.SECTION)
    assert len(section_plugins) == 1
    assert isinstance(section_plugins[0], TestSectionPlugin)
    
    # Cleanup plugin
    registry.cleanup_plugin("test_section")
    assert not instance.is_initialized


def test_plugin_manager():
    """Test plugin manager functionality."""
    registry = PluginRegistry()
    manager = PluginManager(registry)
    
    # Register plugin class
    registry.register_plugin_class(TestSectionPlugin)
    
    # Load plugin
    plugin = manager.load_plugin("test_section")
    assert isinstance(plugin, TestSectionPlugin)
    assert plugin.is_initialized
    
    # Get plugin
    retrieved = manager.get_plugin("test_section")
    assert retrieved is plugin
    
    # Get plugins by type
    section_plugins = manager.get_plugins_by_type(PluginType.SECTION)
    assert len(section_plugins) == 1
    
    # Unload plugin
    manager.unload_plugin("test_section")
    assert not plugin.is_initialized
    assert manager.get_plugin("test_section") is None


def test_plugin_with_config():
    """Test plugin with configuration."""
    
    class ConfigPlugin(SectionPlugin):
        @property
        def metadata(self):
            return PluginMetadata(
                name="config_plugin",
                version="1.0.0",
                description="Plugin requiring configuration",
                author="Test Author",
                plugin_type=PluginType.SECTION,
                config_schema={
                    "required": ["title_prefix"],
                    "properties": {
                        "title_prefix": {"type": "string"}
                    }
                }
            )
        
        def validate_config(self, config):
            return "title_prefix" in config
        
        def generate_section(self, context):
            prefix = self.config.get("title_prefix", "Default")
            return Section(
                name="config_section",
                title=f"{prefix} Section",
                content="This section uses configuration.",
                word_count=6
            )
    
    registry = PluginRegistry()
    registry.register_plugin_class(ConfigPlugin)
    
    # Test with valid config
    config = {"title_prefix": "Custom"}
    instance = registry.create_plugin_instance("config_plugin", config)
    assert instance.config == config
    
    # Test with invalid config
    with pytest.raises(PluginError):
        registry.create_plugin_instance("config_plugin", {})


def test_plugin_dependencies():
    """Test plugin dependencies."""
    
    class DependentPlugin(SectionPlugin):
        @property
        def metadata(self):
            return PluginMetadata(
                name="dependent_plugin",
                version="1.0.0",
                description="Plugin with dependencies",
                author="Test Author",
                plugin_type=PluginType.SECTION,
                dependencies=["test_section"]
            )
        
        def generate_section(self, context):
            return Section(
                name="dependent_section",
                title="Dependent Section",
                content="This section depends on test_section.",
                word_count=7
            )
    
    registry = PluginRegistry()
    
    # Register plugins
    registry.register_plugin_class(TestSectionPlugin)
    registry.register_plugin_class(DependentPlugin)
    
    # Create instances
    base_instance = registry.create_plugin_instance("test_section")
    dep_instance = registry.create_plugin_instance("dependent_plugin")
    
    registry.register_plugin_instance(base_instance)
    registry.register_plugin_instance(dep_instance)
    
    # Initialize dependent plugin (should initialize dependency first)
    registry.initialize_plugin("dependent_plugin")
    
    assert base_instance.is_initialized
    assert dep_instance.is_initialized


if __name__ == "__main__":
    pytest.main([__file__, "-v"])