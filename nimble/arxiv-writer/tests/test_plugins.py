"""
Tests for the plugin system.
"""

import pytest
import tempfile
import shutil
from pathlib import Path
from typing import Dict, Any, List

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.arxiv_writer.plugins import (
    BasePlugin, SectionPlugin, FormatterPlugin, ValidatorPlugin,
    ContextProcessorPlugin, PluginType, PluginMetadata,
    PluginRegistry, PluginManager, get_global_registry, get_global_manager
)
from src.arxiv_writer.core.models import Section, ValidationResult
from src.arxiv_writer.core.exceptions import PluginError


# Test plugin implementations
class TestSectionPlugin(SectionPlugin):
    """Test section plugin implementation."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="test_section",
            version="1.0.0",
            description="Test section plugin",
            author="Test Author",
            plugin_type=PluginType.SECTION
        )
    
    def generate_section(self, context: Dict[str, Any]) -> Section:
        return Section(
            name="test_section",
            title="Test Section",
            content="This is a test section generated by the plugin.",
            word_count=10
        )


class TestFormatterPlugin(FormatterPlugin):
    """Test formatter plugin implementation."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="test_formatter",
            version="1.0.0",
            description="Test formatter plugin",
            author="Test Author",
            plugin_type=PluginType.FORMATTER
        )
    
    def format_paper(self, sections: List[Section]) -> str:
        return "\n\n".join([f"# {section.title}\n{section.content}" for section in sections])
    
    def get_supported_formats(self) -> List[str]:
        return ["markdown", "text"]


class TestValidatorPlugin(ValidatorPlugin):
    """Test validator plugin implementation."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="test_validator",
            version="1.0.0",
            description="Test validator plugin",
            author="Test Author",
            plugin_type=PluginType.VALIDATOR
        )
    
    def validate_content(self, content: str, context: Dict[str, Any] = None) -> ValidationResult:
        word_count = len(content.split())
        is_valid = word_count >= 5
        
        errors = [] if is_valid else ["Content too short"]
        return ValidationResult(
            is_valid=is_valid,
            errors=errors,
            warnings=[],
            metrics={"word_count": word_count}
        )


class TestContextProcessorPlugin(ContextProcessorPlugin):
    """Test context processor plugin implementation."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="test_context_processor",
            version="1.0.0",
            description="Test context processor plugin",
            author="Test Author",
            plugin_type=PluginType.CONTEXT_PROCESSOR
        )
    
    def process_context(self, context: Dict[str, Any]) -> Dict[str, Any]:
        processed = context.copy()
        processed["processed_by"] = "test_context_processor"
        return processed


class TestPluginWithDependencies(SectionPlugin):
    """Test plugin with dependencies."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="dependent_plugin",
            version="1.0.0",
            description="Plugin with dependencies",
            author="Test Author",
            plugin_type=PluginType.SECTION,
            dependencies=["test_section"]
        )
    
    def generate_section(self, context: Dict[str, Any]) -> Section:
        return Section(
            name="dependent_section",
            title="Dependent Section",
            content="This section depends on test_section.",
            word_count=7
        )


class TestPluginWithConfig(SectionPlugin):
    """Test plugin that requires configuration."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="config_plugin",
            version="1.0.0",
            description="Plugin requiring configuration",
            author="Test Author",
            plugin_type=PluginType.SECTION,
            config_schema={
                "required": ["title_prefix"],
                "properties": {
                    "title_prefix": {"type": "string"}
                }
            }
        )
    
    def validate_config(self, config: Dict[str, Any]) -> bool:
        return "title_prefix" in config
    
    def generate_section(self, context: Dict[str, Any]) -> Section:
        prefix = self.config.get("title_prefix", "Default")
        return Section(
            name="config_section",
            title=f"{prefix} Section",
            content="This section uses configuration.",
            word_count=6
        )


class TestBasePlugin:
    """Tests for BasePlugin class."""
    
    def test_base_plugin_cannot_be_instantiated_directly(self):
        """Test that BasePlugin cannot be instantiated directly."""
        with pytest.raises(TypeError):
            BasePlugin()
    
    def test_plugin_initialization(self):
        """Test plugin initialization and cleanup."""
        plugin = TestSectionPlugin()
        
        assert not plugin.is_initialized
        
        plugin.initialize()
        assert plugin.is_initialized
        
        plugin.cleanup()
        assert not plugin.is_initialized
    
    def test_plugin_metadata(self):
        """Test plugin metadata access."""
        plugin = TestSectionPlugin()
        metadata = plugin.metadata
        
        assert metadata.name == "test_section"
        assert metadata.version == "1.0.0"
        assert metadata.plugin_type == PluginType.SECTION
    
    def test_plugin_config_validation(self):
        """Test plugin configuration validation."""
        plugin = TestPluginWithConfig()
        
        # Valid config
        assert plugin.validate_config({"title_prefix": "Custom"})
        
        # Invalid config
        assert not plugin.validate_config({})


class TestSectionPlugin:
    """Tests for SectionPlugin class."""
    
    def test_section_generation(self):
        """Test section generation."""
        plugin = TestSectionPlugin()
        context = {"test_data": "value"}
        
        section = plugin.generate_section(context)
        
        assert isinstance(section, Section)
        assert section.name == "test_section"
        assert section.title == "Test Section"
        assert "test section" in section.content.lower()
    
    def test_section_validation(self):
        """Test section validation."""
        plugin = TestSectionPlugin()
        section = Section(
            name="test",
            title="Test",
            content="Valid content",
            word_count=2
        )
        
        result = plugin.validate_section(section)
        assert isinstance(result, ValidationResult)
        assert result.is_valid


class TestFormatterPlugin:
    """Tests for FormatterPlugin class."""
    
    def test_paper_formatting(self):
        """Test paper formatting."""
        plugin = TestFormatterPlugin()
        sections = [
            Section(name="intro", title="Introduction", content="Intro content", word_count=2),
            Section(name="conclusion", title="Conclusion", content="Conclusion content", word_count=2)
        ]
        
        formatted = plugin.format_paper(sections)
        
        assert "# Introduction" in formatted
        assert "# Conclusion" in formatted
        assert "Intro content" in formatted
        assert "Conclusion content" in formatted
    
    def test_supported_formats(self):
        """Test supported formats."""
        plugin = TestFormatterPlugin()
        formats = plugin.get_supported_formats()
        
        assert "markdown" in formats
        assert "text" in formats


class TestValidatorPlugin:
    """Tests for ValidatorPlugin class."""
    
    def test_content_validation_valid(self):
        """Test validation of valid content."""
        plugin = TestValidatorPlugin()
        content = "This is valid content with enough words."
        
        result = plugin.validate_content(content)
        
        assert result.is_valid
        assert len(result.errors) == 0
        assert result.metrics["word_count"] == 8
    
    def test_content_validation_invalid(self):
        """Test validation of invalid content."""
        plugin = TestValidatorPlugin()
        content = "Too short"
        
        result = plugin.validate_content(content)
        
        assert not result.is_valid
        assert "Content too short" in result.errors
        assert result.metrics["word_count"] == 2


class TestContextProcessorPlugin:
    """Tests for ContextProcessorPlugin class."""
    
    def test_context_processing(self):
        """Test context processing."""
        plugin = TestContextProcessorPlugin()
        context = {"original_key": "original_value"}
        
        processed = plugin.process_context(context)
        
        assert processed["original_key"] == "original_value"
        assert processed["processed_by"] == "test_context_processor"


class TestPluginRegistry:
    """Tests for PluginRegistry class."""
    
    def setup_method(self):
        """Set up test registry."""
        self.registry = PluginRegistry()
    
    def test_register_plugin_class(self):
        """Test plugin class registration."""
        self.registry.register_plugin_class(TestSectionPlugin)
        
        plugins = self.registry.list_registered_plugins()
        assert "test_section" in plugins
        assert plugins["test_section"]["type"] == "section"
    
    def test_register_invalid_plugin_class(self):
        """Test registration of invalid plugin class."""
        class InvalidPlugin:
            pass
        
        with pytest.raises(PluginError):
            self.registry.register_plugin_class(InvalidPlugin)
    
    def test_create_plugin_instance(self):
        """Test plugin instance creation."""
        self.registry.register_plugin_class(TestSectionPlugin)
        
        instance = self.registry.create_plugin_instance("test_section")
        
        assert isinstance(instance, TestSectionPlugin)
        assert not instance.is_initialized
    
    def test_create_plugin_instance_with_config(self):
        """Test plugin instance creation with configuration."""
        self.registry.register_plugin_class(TestPluginWithConfig)
        config = {"title_prefix": "Custom"}
        
        instance = self.registry.create_plugin_instance("config_plugin", config)
        
        assert isinstance(instance, TestPluginWithConfig)
        assert instance.config == config
    
    def test_create_plugin_instance_invalid_config(self):
        """Test plugin instance creation with invalid configuration."""
        self.registry.register_plugin_class(TestPluginWithConfig)
        
        with pytest.raises(PluginError):
            self.registry.create_plugin_instance("config_plugin", {})
    
    def test_register_plugin_instance(self):
        """Test plugin instance registration."""
        plugin = TestSectionPlugin()
        self.registry.register_plugin_instance(plugin)
        
        retrieved = self.registry.get_plugin("test_section")
        assert retrieved is plugin
    
    def test_get_plugins_by_type(self):
        """Test getting plugins by type."""
        self.registry.register_plugin_class(TestSectionPlugin)
        self.registry.register_plugin_class(TestFormatterPlugin)
        
        # Create instances
        section_instance = self.registry.create_plugin_instance("test_section")
        formatter_instance = self.registry.create_plugin_instance("test_formatter")
        
        self.registry.register_plugin_instance(section_instance)
        self.registry.register_plugin_instance(formatter_instance)
        
        section_plugins = self.registry.get_plugins_by_type(PluginType.SECTION)
        formatter_plugins = self.registry.get_plugins_by_type(PluginType.FORMATTER)
        
        assert len(section_plugins) == 1
        assert len(formatter_plugins) == 1
        assert isinstance(section_plugins[0], TestSectionPlugin)
        assert isinstance(formatter_plugins[0], TestFormatterPlugin)
    
    def test_plugin_initialization(self):
        """Test plugin initialization."""
        self.registry.register_plugin_class(TestSectionPlugin)
        instance = self.registry.create_plugin_instance("test_section")
        self.registry.register_plugin_instance(instance)
        
        assert not instance.is_initialized
        
        self.registry.initialize_plugin("test_section")
        assert instance.is_initialized
    
    def test_plugin_initialization_with_dependencies(self):
        """Test plugin initialization with dependencies."""
        # Register plugins
        self.registry.register_plugin_class(TestSectionPlugin)
        self.registry.register_plugin_class(TestPluginWithDependencies)
        
        # Create instances
        base_instance = self.registry.create_plugin_instance("test_section")
        dep_instance = self.registry.create_plugin_instance("dependent_plugin")
        
        self.registry.register_plugin_instance(base_instance)
        self.registry.register_plugin_instance(dep_instance)
        
        # Initialize dependent plugin (should initialize dependency first)
        self.registry.initialize_plugin("dependent_plugin")
        
        assert base_instance.is_initialized
        assert dep_instance.is_initialized
    
    def test_plugin_cleanup(self):
        """Test plugin cleanup."""
        self.registry.register_plugin_class(TestSectionPlugin)
        instance = self.registry.create_plugin_instance("test_section")
        self.registry.register_plugin_instance(instance)
        self.registry.initialize_plugin("test_section")
        
        assert instance.is_initialized
        
        self.registry.cleanup_plugin("test_section")
        assert not instance.is_initialized
    
    def test_unregister_plugin(self):
        """Test plugin unregistration."""
        self.registry.register_plugin_class(TestSectionPlugin)
        instance = self.registry.create_plugin_instance("test_section")
        self.registry.register_plugin_instance(instance)
        self.registry.initialize_plugin("test_section")
        
        self.registry.unregister_plugin("test_section")
        
        assert self.registry.get_plugin("test_section") is None
        assert not instance.is_initialized


class TestPluginManager:
    """Tests for PluginManager class."""
    
    def setup_method(self):
        """Set up test manager."""
        self.registry = PluginRegistry()
        self.manager = PluginManager(self.registry)
    
    def test_load_plugin(self):
        """Test plugin loading."""
        self.registry.register_plugin_class(TestSectionPlugin)
        
        plugin = self.manager.load_plugin("test_section")
        
        assert isinstance(plugin, TestSectionPlugin)
        assert plugin.is_initialized
    
    def test_load_plugin_with_config(self):
        """Test plugin loading with configuration."""
        self.registry.register_plugin_class(TestPluginWithConfig)
        config = {"title_prefix": "Custom"}
        
        plugin = self.manager.load_plugin("config_plugin", config)
        
        assert isinstance(plugin, TestPluginWithConfig)
        assert plugin.config == config
    
    def test_unload_plugin(self):
        """Test plugin unloading."""
        self.registry.register_plugin_class(TestSectionPlugin)
        plugin = self.manager.load_plugin("test_section")
        
        assert plugin.is_initialized
        
        self.manager.unload_plugin("test_section")
        
        assert not plugin.is_initialized
        assert self.manager.get_plugin("test_section") is None
    
    def test_get_plugins_by_type(self):
        """Test getting plugins by type through manager."""
        self.registry.register_plugin_class(TestSectionPlugin)
        self.registry.register_plugin_class(TestFormatterPlugin)
        
        self.manager.load_plugin("test_section")
        self.manager.load_plugin("test_formatter")
        
        section_plugins = self.manager.get_plugins_by_type(PluginType.SECTION)
        formatter_plugins = self.manager.get_plugins_by_type(PluginType.FORMATTER)
        
        assert len(section_plugins) == 1
        assert len(formatter_plugins) == 1
    
    def test_reload_plugin(self):
        """Test plugin reloading."""
        self.registry.register_plugin_class(TestPluginWithConfig)
        config = {"title_prefix": "Original"}
        
        original_plugin = self.manager.load_plugin("config_plugin", config)
        original_id = id(original_plugin)
        
        reloaded_plugin = self.manager.reload_plugin("config_plugin")
        reloaded_id = id(reloaded_plugin)
        
        assert original_id != reloaded_id
        assert reloaded_plugin.config == config
    
    def test_validate_plugin_dependencies(self):
        """Test plugin dependency validation."""
        self.registry.register_plugin_class(TestPluginWithDependencies)
        self.manager.load_plugin("dependent_plugin")
        
        missing_deps = self.manager.validate_plugin_dependencies()
        
        assert "dependent_plugin" in missing_deps
        assert "test_section" in missing_deps["dependent_plugin"]
        
        # Load dependency
        self.registry.register_plugin_class(TestSectionPlugin)
        self.manager.load_plugin("test_section")
        
        missing_deps = self.manager.validate_plugin_dependencies()
        assert "dependent_plugin" not in missing_deps
    
    def test_get_plugin_status(self):
        """Test getting plugin status."""
        self.registry.register_plugin_class(TestSectionPlugin)
        self.manager.load_plugin("test_section", {"test_config": "value"})
        
        status = self.manager.get_plugin_status()
        
        assert "test_section" in status
        plugin_status = status["test_section"]
        assert plugin_status["initialized"]
        assert plugin_status["instance_registered"]
        assert plugin_status["config"] == {"test_config": "value"}
        assert plugin_status["dependencies_satisfied"]


class TestPluginDiscovery:
    """Tests for plugin discovery functionality."""
    
    def setup_method(self):
        """Set up test environment."""
        self.temp_dir = Path(tempfile.mkdtemp())
        self.registry = PluginRegistry()
    
    def teardown_method(self):
        """Clean up test environment."""
        shutil.rmtree(self.temp_dir)
    
    def test_discover_plugins_from_directory(self):
        """Test plugin discovery from directory."""
        # Create a test plugin file
        plugin_file = self.temp_dir / "test_plugin.py"
        plugin_code = '''
from src.arxiv_writer.plugins import SectionPlugin, PluginMetadata, PluginType
from src.arxiv_writer.core.models import Section
from typing import Dict, Any

class DiscoveredPlugin(SectionPlugin):
    @property
    def metadata(self):
        return PluginMetadata(
            name="discovered_plugin",
            version="1.0.0",
            description="Discovered plugin",
            author="Test",
            plugin_type=PluginType.SECTION
        )
    
    def generate_section(self, context: Dict[str, Any]) -> Section:
        return Section(
            name="discovered",
            title="Discovered Section",
            content="Content from discovered plugin",
            word_count=5
        )
'''
        plugin_file.write_text(plugin_code)
        
        # Discover plugins
        discovered_count = self.registry.discover_plugins([str(self.temp_dir)])
        
        assert discovered_count == 1
        
        plugins = self.registry.list_registered_plugins()
        assert "discovered_plugin" in plugins


class TestGlobalInstances:
    """Tests for global registry and manager instances."""
    
    def test_global_registry(self):
        """Test global registry access."""
        registry1 = get_global_registry()
        registry2 = get_global_registry()
        
        assert registry1 is registry2
    
    def test_global_manager(self):
        """Test global manager access."""
        manager1 = get_global_manager()
        manager2 = get_global_manager()
        
        assert manager1 is manager2