name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      test_pypi:
        description: 'Release to Test PyPI first'
        required: false
        type: boolean
        default: true

jobs:
  validate-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,latex]"

    - name: Run full test suite
      run: |
        pytest -v --cov=arxiv_writer --cov-report=xml

    - name: Run security checks
      run: |
        safety check
        bandit -r src

    - name: Validate package metadata
      run: |
        python -c "
        import toml
        config = toml.load('pyproject.toml')
        project = config['project']
        assert project['name'] == 'arxiv-writer'
        assert 'version' in project
        assert 'description' in project
        assert 'authors' in project
        print('Package metadata validated')
        "

  build-and-test:
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        arxiv-writer --help
        python -c "import arxiv_writer; print('Package works!')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-dist
        path: dist/

  test-pypi-release:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event.inputs.test_pypi == 'true' || github.event_name == 'push'
    environment: test-pypi
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}

    - name: Test installation from Test PyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ arxiv-writer
        arxiv-writer --help

  production-release:
    runs-on: ubuntu-latest
    needs: [build-and-test, test-pypi-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  post-release-validation:
    runs-on: ${{ matrix.os }}
    needs: production-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.12"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for PyPI availability
      run: |
        sleep 300  # Wait 5 minutes for PyPI to propagate

    - name: Test installation from PyPI
      run: |
        pip install arxiv-writer
        arxiv-writer --help
        python -c "import arxiv_writer; print('Production release validated!')"