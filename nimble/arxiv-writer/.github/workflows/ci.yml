name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,latex]"

    - name: Lint with ruff
      run: |
        ruff check src tests

    - name: Check formatting with black
      run: |
        black --check src tests

    - name: Type check with mypy
      run: |
        mypy src

    - name: Run tests
      run: |
        pytest -v --cov=arxiv_writer --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run bandit security check
      run: |
        bandit -r src -f json -o bandit-report.json || true
        bandit -r src

    - name: Run semgrep security scan
      run: |
        semgrep --config=auto src --json --output=semgrep-report.json || true
        semgrep --config=auto src

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-install:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.12"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Test wheel installation
      run: |
        pip install dist/*.whl

    - name: Test CLI entry point
      run: |
        arxiv-writer --help

    - name: Test package import
      run: |
        python -c "import arxiv_writer; print('Package imported successfully')"

    - name: Test basic functionality
      run: |
        python -c "
        from arxiv_writer.core.generator import ArxivPaperGenerator
        from arxiv_writer.config.loader import PaperConfig
        print('Core classes imported successfully')
        "

  docker-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Build test Docker image
      run: |
        docker build -f docker/test.Dockerfile -t arxiv-writer-test .

    - name: Run tests in Docker
      run: |
        docker run --rm arxiv-writer-test

    - name: Test CLI in Docker
      run: |
        docker run --rm arxiv-writer-test arxiv-writer --help