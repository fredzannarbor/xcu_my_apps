name: Test PyPI Release

on:
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Version to test (e.g., 0.1.0)'
        required: true
        type: string
      skip_test_pypi:
        description: 'Skip Test PyPI and test production PyPI directly'
        required: false
        type: boolean
        default: false

jobs:
  test-test-pypi:
    runs-on: ${{ matrix.os }}
    if: ${{ !inputs.skip_test_pypi }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.12"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for Test PyPI availability
      run: |
        echo "Waiting for package to be available on Test PyPI..."
        sleep 120

    - name: Test installation from Test PyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ arxiv-writer==${{ inputs.test_version }}

    - name: Test CLI functionality
      run: |
        arxiv-writer --help
        arxiv-writer --version

    - name: Test package import and functionality
      run: |
        python -c "
        import arxiv_writer
        print(f'Package version: {getattr(arxiv_writer, \"__version__\", \"unknown\")}')
        
        # Test core imports
        from arxiv_writer.core.generator import ArxivPaperGenerator
        from arxiv_writer.config.loader import PaperConfig
        from arxiv_writer.llm.caller import LLMCaller
        from arxiv_writer.cli.main import main
        
        print('✓ All imports successful')
        print('✓ Test PyPI installation test passed')
        "

    - name: Test basic configuration
      run: |
        python -c "
        from arxiv_writer.config.loader import PaperConfig
        
        # Test default configuration
        config = PaperConfig.create_default()
        print('✓ Default configuration created successfully')
        
        # Test configuration validation
        config.validate()
        print('✓ Configuration validation passed')
        "

  test-production-pypi:
    runs-on: ${{ matrix.os }}
    needs: test-test-pypi
    if: ${{ always() && (needs.test-test-pypi.result == 'success' || inputs.skip_test_pypi) }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster testing
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for PyPI availability
      if: ${{ !inputs.skip_test_pypi }}
      run: |
        echo "Waiting for package to be available on production PyPI..."
        sleep 300

    - name: Test installation from PyPI
      run: |
        pip install arxiv-writer==${{ inputs.test_version }}

    - name: Test CLI functionality
      run: |
        arxiv-writer --help
        arxiv-writer --version

    - name: Test package import and functionality
      run: |
        python -c "
        import arxiv_writer
        print(f'Package version: {getattr(arxiv_writer, \"__version__\", \"unknown\")}')
        
        # Test core imports
        from arxiv_writer.core.generator import ArxivPaperGenerator
        from arxiv_writer.config.loader import PaperConfig
        from arxiv_writer.llm.caller import LLMCaller
        from arxiv_writer.templates.manager import TemplateManager
        from arxiv_writer.plugins.manager import PluginManager
        from arxiv_writer.cli.main import main
        
        print('✓ All imports successful')
        print('✓ Production PyPI installation test passed')
        "

    - name: Test configuration and basic functionality
      run: |
        python -c "
        from arxiv_writer.config.loader import PaperConfig
        from arxiv_writer.core.generator import ArxivPaperGenerator
        
        # Test configuration creation
        config = PaperConfig.create_default()
        config.validate()
        print('✓ Configuration validation passed')
        
        # Test generator initialization (without LLM calls)
        generator = ArxivPaperGenerator(config)
        print('✓ Generator initialization successful')
        "

    - name: Test with optional dependencies
      run: |
        pip install arxiv-writer[latex]==${{ inputs.test_version }}
        python -c "
        import arxiv_writer
        print('✓ Optional dependencies installation successful')
        "

  docker-compatibility-test:
    runs-on: ubuntu-latest
    needs: test-production-pypi
    if: ${{ always() && needs.test-production-pypi.result == 'success' }}

    steps:
    - name: Test Python 3.8 Alpine
      run: |
        docker run --rm python:3.8-alpine sh -c "
          apk add --no-cache git build-base linux-headers &&
          pip install arxiv-writer==${{ inputs.test_version }} &&
          arxiv-writer --help &&
          python -c 'import arxiv_writer; print(\"Alpine 3.8 test passed\")'
        "

    - name: Test Python 3.12 Alpine
      run: |
        docker run --rm python:3.12-alpine sh -c "
          apk add --no-cache git build-base linux-headers &&
          pip install arxiv-writer==${{ inputs.test_version }} &&
          arxiv-writer --help &&
          python -c 'import arxiv_writer; print(\"Alpine 3.12 test passed\")'
        "

    - name: Test Ubuntu 20.04
      run: |
        docker run --rm ubuntu:20.04 sh -c "
          apt-get update &&
          apt-get install -y python3 python3-pip git &&
          pip3 install arxiv-writer==${{ inputs.test_version }} &&
          python3 -c 'import arxiv_writer; print(\"Ubuntu 20.04 test passed\")'
        "

    - name: Test Ubuntu 22.04
      run: |
        docker run --rm ubuntu:22.04 sh -c "
          apt-get update &&
          apt-get install -y python3 python3-pip git &&
          pip3 install arxiv-writer==${{ inputs.test_version }} &&
          python3 -c 'import arxiv_writer; print(\"Ubuntu 22.04 test passed\")'
        "

  integration-test:
    runs-on: ubuntu-latest
    needs: test-production-pypi
    if: ${{ always() && needs.test-production-pypi.result == 'success' }}

    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install package
      run: |
        pip install arxiv-writer==${{ inputs.test_version }}

    - name: Test CLI commands
      run: |
        # Test help commands
        arxiv-writer --help
        arxiv-writer generate --help || echo "Generate command help test"
        arxiv-writer validate --help || echo "Validate command help test"
        
        # Test version
        arxiv-writer --version

    - name: Test configuration creation
      run: |
        python -c "
        from arxiv_writer.config.loader import PaperConfig
        import tempfile
        import os
        
        # Create temporary directory
        with tempfile.TemporaryDirectory() as temp_dir:
            config_file = os.path.join(temp_dir, 'test_config.json')
            
            # Create and save configuration
            config = PaperConfig.create_default()
            config.save_to_file(config_file)
            print('✓ Configuration saved successfully')
            
            # Load configuration
            loaded_config = PaperConfig.from_file(config_file)
            loaded_config.validate()
            print('✓ Configuration loaded and validated successfully')
        "

    - name: Test template system
      run: |
        python -c "
        from arxiv_writer.templates.manager import TemplateManager
        from arxiv_writer.config.loader import PaperConfig
        
        config = PaperConfig.create_default()
        template_manager = TemplateManager(config.template_config)
        
        # Test template loading
        templates = template_manager.load_templates()
        print(f'✓ Loaded {len(templates)} templates')
        
        # Test template rendering (basic)
        if templates:
            template_name = list(templates.keys())[0]
            template = templates[template_name]
            context = {'title': 'Test Paper', 'content': 'Test content'}
            try:
                rendered = template_manager.render_template(template_name, context)
                print('✓ Template rendering successful')
            except Exception as e:
                print(f'Template rendering test: {e}')
        "

  report-results:
    runs-on: ubuntu-latest
    needs: [test-test-pypi, test-production-pypi, docker-compatibility-test, integration-test]
    if: always()

    steps:
    - name: Generate test report
      run: |
        echo "# PyPI Release Test Report" > test-report.md
        echo "" >> test-report.md
        echo "**Version:** ${{ inputs.test_version }}" >> test-report.md
        echo "**Date:** $(date -u)" >> test-report.md
        echo "" >> test-report.md
        echo "## Test Results" >> test-report.md
        echo "" >> test-report.md
        
        if [[ "${{ needs.test-test-pypi.result }}" == "success" ]]; then
          echo "✅ Test PyPI installation: PASSED" >> test-report.md
        else
          echo "❌ Test PyPI installation: FAILED" >> test-report.md
        fi
        
        if [[ "${{ needs.test-production-pypi.result }}" == "success" ]]; then
          echo "✅ Production PyPI installation: PASSED" >> test-report.md
        else
          echo "❌ Production PyPI installation: FAILED" >> test-report.md
        fi
        
        if [[ "${{ needs.docker-compatibility-test.result }}" == "success" ]]; then
          echo "✅ Docker compatibility: PASSED" >> test-report.md
        else
          echo "❌ Docker compatibility: FAILED" >> test-report.md
        fi
        
        if [[ "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "✅ Integration tests: PASSED" >> test-report.md
        else
          echo "❌ Integration tests: FAILED" >> test-report.md
        fi
        
        echo "" >> test-report.md
        echo "## Summary" >> test-report.md
        
        if [[ "${{ needs.test-production-pypi.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "🎉 **All critical tests passed!** The release is working correctly." >> test-report.md
        else
          echo "⚠️ **Some tests failed.** Please investigate the issues." >> test-report.md
        fi
        
        cat test-report.md

    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: pypi-test-report
        path: test-report.md